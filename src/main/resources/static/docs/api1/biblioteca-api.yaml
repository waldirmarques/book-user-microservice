#informações da api
swagger: "2.0"
info:
  description: "Esta versão é um microservice do sistema de biblioteca, o qual fornecer dados puros nos formatos JSON de usuários e livros. Ele tenta aderir à arquitetura REST o máximo, nesta página, você pode conhecer e experimentar as URLs para acessar os dados, os parâmetros
    da sequência de consultas que podem ser aplicados para filtrar e selecionar resultados e as estruturas de dados retornadas.\n
    ATENÇÃO: Esta versão ainda está incompleta, sujeita a alterações."
  version: "1.0.0"
  title: "Book-User: biblioteca"
  contact:
    email: "waldir.sousa@phoebustecnologia.com.br"
  license:
    name: "Open Source"

tags:
  - name: "book-controller"
    description: "All about library books"
  - name: "user-controller"
    description: "All about library users"

schemes:
  - "http"

paths:
  /v1/api/book/{id}:
    get:  #Buscar livro por id
      tags:
        - "book-controller"
      summary: "Buscar livro por id"
      description: "Busca livro no Banco por seu id"
      operationId: "findIdBook"
      produces:
        - "application/json"

      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"

      responses:
        200:
          description: "successful operation"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"

  /v1/api/book/getBookSpecificId/{id}:
    get:  #Buscar livro por id
      tags:
        - "book-controller"
      summary: "Buscar livro por specific id"
      description: "Busca livro no Banco por seu specific id"
      operationId: "findSpecificIdBook"
      produces:
        - "application/json"

      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"

      responses:
        200:
          description: "successful operation"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"

  /v1/api/book/getAllBookSpecificId/{id}:
    get:  #Buscar livro por id
      tags:
        - "book-controller"
      summary: "Busca todos os livro por specific id de emprestimo"
      description: "Busca todos os livros no Banco que tem o mesmo specific id de um emprestimo"
      operationId: "findSpecificIdLoanBook"
      produces:
        - "application/json"

      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"

      responses:
        200:
          description: "successful operation"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"

  /v1/api/book/page:
    get: #buscar todos os livros com paginação
      tags:
        - "book-controller"
      summary: "Buscar todos os livros com paginação"
      description: "Retorna page e size que são informados na requisição. Caso não padas, retorna os valores defult"
      operationId: "findBookPage"
      produces:
        - "application/json"

      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"

        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"

  /v1/api/book:
    get: #buscar todos os livros
      tags:
        - "book-controller"
      summary: "Buscar todos os livros"
      description: ""
      operationId: "findAllBook"
      produces:
        - "application/json"

      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"

    post: #adicionar um novo livro
      tags:
        - "book-controller"
      summary: "Adicionar livro"
      description: "Endpoint que adiciona um novo objeto Book no banco de dados."
      operationId: "insertBook"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "BookDTO"
          description: "Parametros necessarios para adicionar livro em biblioteca."
          required: true
          schema:
            $ref: "#/definitions/Book"
      responses:
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"

    delete: #Deletar livros
      tags:
        - "book-controller"
      summary: "Deletar livros"
      description: "Deleta book pesquisando por seu id"
      operationId: "deleteBook"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"

      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"

    put: #atualizar um livro
      tags:
        - "book-controller"
      summary: "Atualizar livro"
      description: "Endpoint que atualiza um objeto Book no banco de dados."
      operationId: "updateBook"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"

        - in: body
          name: "BookDTO"
          description: "Parametros necessarios para atualizar livro em biblioteca."
          required: true
          schema:
            $ref: "#/definitions/Book"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"
        405:
          description: "Validation exception"

  /v1/api/book/updateStatusBook/{id}:
    put: #atualizar status de um livro
      tags:
        - "book-controller"
      summary: "Atualizar status de um livro"
      description: "Endpoint que atualiza o status de emprestimo de um Book no banco de dados."
      operationId: "updateStatusBook"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"

        - in: body
          name: "BookDTO"
          description: "Parametros necessarios para atualizar livro em biblioteca."
          required: true
          schema:
            $ref: "#/definitions/BookStatus"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"
        405:
          description: "Validation exception"

  /v1/api/book/updateLoanSpecificId/{id}:
    put: #atualizar um livro
      tags:
        - "book-controller"
      summary: "Atualizar specific id de emprestimos em livros"
      description: "Endpoint que atualiza o specific id de loan na tabela de book no banco de dados."
      operationId: "updateSpecificId"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"

        - in: body
          name: "BookDTO"
          description: "Parametros necessarios para atualizar livro em biblioteca."
          required: true
          schema:
            $ref: "#/definitions/BookLoanSpecificID"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"
        405:
          description: "Validation exception"



  /v1/api/user/{id}:
    get:  #buscar todos os usuários
      tags:
        - "user-controller"
      summary: "Buscar usuários por id"
      description: "Retorna User por id do Banco de dados"
      operationId: "findIdUser"
      produces:
        - "application/json"

      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"

      responses:
        200:
          description: "successful operation"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"

  /v1/api/user/page:
    get:
      tags:
        - "user-controller"
      summary: "Buscar todos os usuários com paginação"
      description: "Retorna page e size que são informados na requisição. Caso não padas, retorna os valores defult"
      operationId: "findUserPage"
      produces:
        - "application/json"

      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"

        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"

  /v1/api/user/getUserSpecificId/{id}:
    get:
      tags:
        - "user-controller"
      summary: "Buscar usuário por specific id"
      description: "Busca usuário no Banco por seu specific id"
      operationId: "findSpecificIdUser"
      produces:
        - "application/json"

      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"

      responses:
        200:
          description: "successful operation"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"


  /v1/api/user: #Endpoint para usuários

    get:  #buscar todos os usuários
      tags:
        - "user-controller"
      summary: "Buscar todos os usuários"
      description: "retorna todos os usuários"
      operationId: "findAllUser"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"

    post:
      tags:
        - "user-controller"
      summary: "Adicionar novo usuário a biblioteca"
      description: "Endpoint que adiciona um novo objeto userApp no banco de dados."
      operationId: "insertUserApp"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "objDTO"
          description: "Parametros necessarios para adicionar userApp na biblioteca."
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"

    delete: #Deletar usuário
      tags:
        - "user-controller"
      summary: "Deletar usuário"
      description: "Deleta um usuário por seu id"
      operationId: "deleteUser"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"

      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"

    put:
      tags:
        - "user-controller"
      summary: "Atualizar usuário"
      description: "Endpoint que atualiza um objeto UserApp no banco de dados."
      operationId: "updateUserApp"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
          format: "int64"

        - in: body
          name: "objDTO"
          description: "Parametros necessarios para atualizar UserApp em biblioteca."
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
        405:
          description: "Validation exception"

  /v1/api/user/updateLoanSpecificId/{id}:
    put: #atualizar um livro
      tags:
        - "user-controller"
      summary: "Atualizar specific id de emprestimos em livros"
      description: "Endpoint que atualiza o specific id de loan na tabela de book no banco de dados."
      operationId: "updateSpecificIdLoan"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"

        - in: body
          name: "BookDTO"
          description: "Parametros necessarios para atualizar livro em biblioteca."
          required: true
          schema:
            $ref: "#/definitions/UserLoanSpecificID"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"
        405:
          description: "Validation exception"

definitions:
  #UserAPP
  User:
    type: "object"
    required:
      - "name"
      - "age"
      - "fone"
    properties:
      name:
        type: "string"
      age:
        type: "integer"
      fone:
        type: "string"

  #UserLoanSpecificID
  UserLoanSpecificID:
    type: "string"

  #Book
  Book:
    type: "object"
    required:
      - "author"
      - "isbn"
      - "resume"
      - "title"
      - "yearBook"
    properties:
      title:
        type: "string"
      resume:
        type: "string"
      isbn:
        type: "string"
      author:
        type: "string"
      yearBook:
        type: "string"
        format: "date"

  #BookLoanSpecificID
  BookLoanSpecificID:
    type: "string"

  #BookStatus
  BookStatus:
    type: "boolean"